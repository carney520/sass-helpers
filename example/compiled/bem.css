.a.c .a__b {
  color: red;
}

.a.e .a__d {
  color: blue;
}

.a__d__f {
  color: green;
}

.a__d.g .a__d__f {
  color: yellow;
}

.a.h .a__d {
  color: white;
}

.a.disable .a__d, .a.large .a__d, .a.primary .a__d {
  color: red;
}

.a:hover .a__d, .a:active .a__d, .a:focus .a__d {
  color: blue;
}

.a--large {
  color: red;
}

.a.--small {
  color: blue;
}

/*# sourceMappingURL=data:application/json;base64,{"version":3,"file":"bem.css","sources":["bem.scss","../scss/helpers.scss","../scss/_unit.scss","../scss/_base.scss","../scss/base/_types.scss","../scss/_quantity-queries.scss","../scss/_bem.scss","../scss/_shortcuts.scss","../scss/_centering.scss","../scss/_breakpoints.scss","../scss/_typograph.scss","../scss/_image.scss","../scss/_util.scss","../scss/grid/_grid.scss","../scss/grid/_row.scss","../scss/grid/_gutter.scss","../scss/grid/_col.scss","../scss/grid/_position.scss","../scss/grid/_classes.scss","../scss/_classes.scss"],"sourcesContent":["@import \"../scss/helpers\";\n\n.a {\n  @include element(b) {         //.a__b\n    @include shadow(c) {        //.a.c .a__b\n      color: red;\n    }\n  }\n\n  @include element(d) {       //.a__d\n    @include shadow(e) {      //.a.e .a__d\n      color: blue;\n    }\n\n    @include element(f) {    //.a__d__f  //don't nest more than one level\n      color: green;\n      @include shadow(g) {   //.a__d.g .a__d__f\n        color: yellow;\n      }\n    }\n    @include shadow(h) {    //.a.h .a__d\n      color: white;\n    }\n    //mutlti shadow\n    @include shadow(disable large primary) { //.a.disable .a__d, .a.large .a__d, .a.primary .a__d\n      color: red;\n    }\n\n    @include shadow(':hover' ':active' ':focus') { \n      color: blue;\n    }\n  }\n}\n\n\n// modifier\n\n.a {\n  @include modifier('large') {  // .a--large\n    color: red;\n  }\n  $combined-modifier: true !global;\n  @include modifier('small') { // .a.--small\n    color: blue;\n  }\n}\n","@import \"unit\";\n@import \"base\";\n@import \"quantity-queries\";\n@import \"bem\";\n@import \"shortcuts\";\n@import \"centering\";\n@import \"breakpoints\";\n@import \"typograph\";\n@import \"image\";\n@import \"util\";\n@import \"grid/grid\";\n@import \"classes\";\n","////\n/// @group functions\n/// @author Hugo Giraudel\n/// @link https://github.com/zurb/foundation-sites/blob/develop/scss/util\n///\n\n\n$global-font-size: 100% !default;\n\n/// removes the unit form a value, returning the number only\n/// @access public\n/// @param {Number} $num - Number to strip unit from\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more absolute length values into matching rem values\n/// @access public\n/// @param {Number|List} $value - one or more values to convert\n/// @param {Number} $base [null] - the base value to use when calculating the 'rem'\n@function convert-to-rem($value, $base: null) { \n  $rem-values: ();\n\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // assume that 100% font-size = 16px in most all browser\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  @if type-of($value) == 'number' {\n    @return -to-rem($value, $base);\n  }\n  @else if type-of($value) == 'list' {\n    @each $v in $value {\n      $rem-values: append($rem-values, -to-rem($v, $base));\n    }\n  }\n  @else {\n    @error \"TypeError `$value` must be a list or number\";\n  }\n  @return $rem-values;\n}\n\n/// @access private\n@function -to-rem($value, $base: null) {\n  @if not type-of($value) == 'number' {\n    @error inspect($value) + \"is not a valid number\";\n  }\n\n  @if unit($value) != 'rem' {\n    $value: strip-unit(-to-px($value)) / strip-unit(-to-px($base)) * 1rem;\n  }\n\n  @if $value == 0rem {\n    $value: 0;\n  }\n  @return $value;\n}\n\n/// Convert a unitless, pixel, or rem value to em, the value relative to html font-size, only use for breakpoints\n/// @access private\n@function -to-em($value) {\n  @if is-px-compatible($value) or unitless($value) {\n    $value: convert-to-rem($value, $base: 16px);\n  }\n  @return strip-unit($value) * 1em;\n}\n\n\n/// covert absolute length to px \n/// @access public\n/// @param {Number} $value - <length> with absolute unit\n/// @return Number with px unit\n@function -to-px($value){\n  @if not type-of($value) == 'number' {\n    @error inspect($value) + \"is not a valid number\";\n  }\n  @return 0px + $value;\n}\n\n/// return true if given $value is px-compatible\n/// @access public\n@function is-px-compatible($value) {\n  $absolute-units: ('px','cm', 'mm', 'pt', 'pc', 'in');\n  @if not unitless($value) and index($absolute-units,unit($value)){\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n","////\n/// @group functions\n////\n@import \"base/types\";\n\n/// Determine if a value is falsey or empty;\n/// @param {Base} $val - Value to check\n/// @return {Boolean}  return true if $val is empty or falsey\n@function is-empty($val) {\n  @if $val == null or $val == none {  //none is a css keyword\n    @return true;\n  }\n  @if type-of($val) == 'number' and strip-unit($val) == 0 {\n    @return true;\n  }\n\n  @if (type-of($val) == 'list' or type-of($val) == 'map') and length($val) == 0 {\n    @return true;\n  }\n\n  @return false;\n}\n\n\n\n/// Finds a value in nested map\n/// @param {Map} $map - Map to pull a value from\n/// @param {String} $keys... - keys to use when looking for a value\n@function map-deep-get($map,$keys...) {\n  @each $key in $keys {\n    $map: map-get($map, $key);\n  }\n  @return $map;\n}\n","////\n/// @group function\n/// @author Hugo Giraudel\n/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/\n////\n$-relative-length: ('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax');\n$-absolute-length: ('cm' 'mm' 'in' 'px' 'pt' 'pc');\n\n@function is-number($value) {\n  @return type-of($value) == 'number';\n}\n\n@function is-integer($value) {\n  @return is-number($value) and round($value) == $value;\n}\n\n@function is-time($value) {\n  @return is-number($value) and index('ms' 's',unit($value)) != null;\n}\n\n@function is-angle($value) {\n  @return is-number($value) and index('deg' 'rad' 'grad' 'turn',unit($value)) != null;\n}\n\n@function is-frequency($value) {\n  @return is-number($value) and index('Hz' 'kHz',unit($value)) != null;\n}\n\n@function is-relative-length($value) {\n  @return is-number($value) and index($-relative-length, $value) != null;\n}\n\n@function is-absolute-length($value) {\n  @return is-number($value) and index($-absolute-length, $value) != null;\n}\n\n@function is-length($value) {\n  @return is-relative-length($value) or is-absolute-length($value);\n}\n\n@function is-percentage($value) {\n  @return is-number($value) and unit($value) == '%';\n}\n\n@function is-resolution($value) {\n  @return is-number($value) and index('dpi' 'dpcm' 'dppx', $value) != null;\n}\n\n@function is-map($value) {\n  @return type-of($value) == 'map';\n}\n\n@function is-list($value) {\n  @return type-of($value) == 'list';\n}\n","////\n/// @author ivan\n/// @group mixins\n////\n\n\n/// 构建选择器\n/// @access private\n/// @param {String} $selector-append -  用于追加到原始选择器后面的选择器\n/// @param {String} $last-append     -  用于追加在  ～ 后面的元素\n/// @param {Boolean} $sibling        -  是否使用 ～ 选择兄弟元素\n/// @example\n\n@function -build-selector($selector-append, $last-selector, $sibling: true) {\n  $selector: ();\n\n  //遍历选择器，比如ul > li, list item \n  @each $s in & {\n    $-last-selector: \"\";\n    $sel1: selector-append($s, $selector-append);\n    @if $sibling {\n      $-last-selector: '~' + if($last-selector, $last-selector, nth($s, -1));\n      $sel2: selector-nest($sel1, $-last-selector);\n      $selector: append($selector, $sel2, comma);\n    } \n    $selector: append($selector, $sel1, comma);\n  }\n  @return selector-parse($selector);\n}\n\n\n/// 选择指定数量的子元素 \n/// @access public\n/// @param {Number | List} $condition - 条件语句\n/// @param {String} $last-selector [null] - 子元素\n/// @example\n///  \n@mixin quantity($condition, $last-selector: null) {\n  $selector-append: null;\n  $sibling: true;         // add ~ selector\n\n  //exactly\n  @if type-of($condition) == 'number' {\n    @if $condition <= 0 {\n      @error '`#{$condition}` must be a positive number';\n    }\n    $count: $condition;\n    $selector-append: ':nth-last-child(#{$count}):first-child';\n  }\n\n  @else if type-of($condition) == 'list' {\n    @if length($condition) == 2 {\n      $operator: nth($condition, 1);\n      $count:    nth($condition,2);\n      @if not type-of($count) == 'number' and $count  < 0 {\n        @error \"#{$count} is not a valid  number\";\n      }\n\n      // less than N\n      @if $operator == 'lt' {\n        $selector-append: ':nth-last-child(-n+#{$count - 1 }):first-child';\n      }\n      //less than equal N\n      @else if $operator == 'lte' {\n        $selector-append: ':nth-last-child(-n+#{$count}):first-child';\n      }\n      //great than N\n      @else if $operator == 'gt' {\n        $selector-append: ':nth-last-child(n+#{$count + 1}):first-child';\n      }\n      //great than equal N\n      @else if $operator == 'gte' {\n        $selector-append: ':nth-last-child(n+#{$count}):first-child';\n      }\n      //head N\n      @else if $operator == 'head' {\n        $sibling: false;\n        $selector-append: ':not(:nth-child(n+#{$count + 1}))';\n      }\n      // last N\n      @else if $operator == 'tail' {\n        $sibling: false;\n        $selector-append: ':not(:nth-child(n+#{$count + 1}))';\n      }\n      @else {\n        @error \"#{$operator} is not a valid operator\";\n      }\n    }\n    //between\n    @else if length($condition) == 3 {\n      $operator: nth($condition,2);\n      $start:    nth($condition,1);\n      $end:      nth($condition,3);\n      \n      @if type-of($start) != 'number' or type-of($end) != 'number' {\n        @error \"start and end must be number,such as '12 to 15'\";\n      }\n      //exclude end\n      @if $operator == 'to' {\n        $selector-append: ':nth-last-child(n+#{$start}):nth-last-child(-n+#{$end - 1}):first-child';\n      }\n      //include end\n      @else if $operator == 'through' {\n        $selector-append: ':nth-last-child(n+#{$start}):nth-last-child(-n+#{$end}):first-child';\n      }\n      @else {\n        @error \"`#{$operator}` is not a valid operator\";\n      }\n    } \n    @else {\n      @error \"#{$condition} is not a valid command\";\n    }\n  }\n\n  $build-selector: -build-selector($selector-append,$last-selector,$sibling);\n\n  @at-root #{build-selector} {\n    @content;\n  }\n}\n","////\n/// @group mixins\n/// @author Hugo Giraudel\n/// @see https://css-tricks.com/snippets/sass/bem-mixins/\n////\n\n$element-separator: '__' !default;\n$modifier-separator: '--' !default;\n$combined-modifier: false !default;   //'.block .--modifier'\n\n/// Block Element\n/// @access public\n/// @alias e\n/// @param {String} $element - Element's name\n/// @example\n///   .block {\n///     @include element('element') { /*...*/ }\n///     @include modifier('modifier') {\n///       /*...*/\n///     @include element('element'){/*...*/}\n///    }\n///   }\n///   output=>\n///   .block__element {/*...*/}\n///   .block--modifier {/*...*/}\n///   .block--modifier__element {/*...*/}\n@mixin element($element) {\n  $old: if(global-variable-exists(-parent), $-parent, null);\n  $-parent: & !global;  // store parent from shadow\n  &#{$element-separator}#{$element} {\n    @content;\n  }\n  $-parent: $old !global;       //restore\n}\n\n/// Block Modifier\n/// @access public\n/// @alias m\n/// @param {String} $modifier - Modifier's name\n@mixin modifier($modifier) {\n  $selector: null;\n  @if $combined-modifier {\n    $selector: selector-append(&, '.#{$modifier-separator}#{$modifier}');\n  } @else {\n    $selector: selector-append(&, $modifier-separator,$modifier);\n  }\n\n  @at-root #{$selector} {\n    @content;\n  }\n}\n\n/// inherit parent status, only use inner element\n/// @example\n///  .b {\n///     @include element(a) {\n///       @include shadow(c) {     //=> .b.c .b__a\n///         color: red;\n///       }\n///     }\n///   }\n$no-parse-prefixs: ('.' '#' ':' '::' '*');\n@function prefixer($value, $addPrefix: true, $prefix: '.') {\n  @if $addPrefix and not index($no-parse-prefixs, str-slice($value, 1, 1)) {\n    @return $prefix + $value;\n  } \n  @return $value;\n}\n\n@mixin shadow($parent, $addPrefix: true, $prefix: '.') {\n  $selector: null;\n\n  @if is-list($parent) {\n    $selectors: ();\n    @each $value in $parent {\n      $value: prefixer($value, $addPrefix, $prefix);\n      $value: selector-append($-parent, $value);\n      $selectors: append($selectors, selector-nest($value, &),comma);\n    }\n    @debug $selectors;\n    $selector: selector-parse($selectors);\n  } \n  @else {\n    $value: prefixer($parent, $addPrefix, $prefix);\n    $selector: selector-nest(selector-append($-parent, $value), &);\n  }\n\n  @at-root #{$selector} {\n    @content;\n  }\n}\n\n/// see {mixin} element\n@mixin e($element) {\n  @include element {\n    @content;\n  }\n}\n\n/// see {mixin} modifier\n@mixin m($modifier){\n  @include modifier {\n    @content;\n  }\n}\n","////\n/// @group shortcut\n/// @access public\n////\n\n/// shortcut for width & height\n@mixin size($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// square\n@mixin square($width){\n  @include size($width);\n}\n\n\n/// resizable block\n/// @param {String} $direction - resize option: horizontal,vertical,both\n@mixin resizable($direction) {\n  resize: $direction; \n  overflow: auto;\n}\n\n\n@mixin hover-focus {\n &:hover,\n &:focus {\n   @content;\n }\n}\n\n@mixin plain-hover-focus {\n  &,\n  &:hover,\n  &:focus {\n    @content;\n  }\n}\n\n@mixin hover-focus-active {\n  &:focus,\n  &:hover,\n  &:active {\n    @content;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-right-radius: $radius;\n  border-top-left-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n\n@function text-inputs(){}\n","////\n/// @group centering\n////\n\n\n@mixin ghost-center-wrapper{\n  &::before {\n    content: \" \";\n    display: inline-block;\n    height: 100%;\n    vertical-align: middle;\n  }\n}\n\n@mixin ghost-center-content {\n  display: inline-block;\n  vertical-align: middle;\n}\n\n\n@mixin flex-vertical-center {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n}\n\n\n/// horizontal centering for normal block element\n@mixin block-horizontal-center {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n/// text horizontal for inline elements\n@mixin text-center {\n  text-align: center;\n}\n\n\n\n/// absolute centering\n@mixin absolute-horizontal-center {\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n@mixin absolute-vertical-center {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n@mixin absolute-center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%,-50%);\n}\n\n\n/// generate classes\n@mixin generate-centering-classes {\n  .text-center {\n    @include text-center;\n  }\n  .absolute-center {\n    @include absolute-center;\n  }\n  .flex-vertical-center {\n    @include flex-vertical-center;\n  }\n}\n","// see https://github.com/zurb/foundation-sites/blob/develop/scss/util/_breakpoint.scss\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. you can use these with the `breakpoint()` mixin to quikly create media queries\n\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px\n) !default;\n\n$-small: small;\n$breakpoint-classes:  (small medium large) !default;\n\n/// Generates a media query string\n/// mobile first\n/// @access private\n/// @param {Keyword|List|Number} $condition - Breakpoint name or px, rem,em value or condition expression\n/// @example\n///  breakpoint(160px);     => \"(min-width: 16em)\"\n///  breakpoint(small);     => \"\"\n///  breakpoint(landscape); => \"(orientation: landscape)\"\n///  breakpoint(lt large);  => \"(max-width: 64em)\"\n///  breakpoint(gt large);  => \"(min-width: 64em)\"\n///  breakpoint(small to medium) => \"(max-width: 40em)\";\n///  breakpoint(media to large)  => \"(min-width: 40em) and (max-width: 64em)\";\n///  ## retina\n///  ```Autoprefixer takes care of adding -webkit-min-device-pixel-ratio and\n///   and -o-min-device-pixel-ratio, but doesn't convert dppx =>  dpi\n///  There's no such thing as unprefixed min-device-pixel-ratio since it's nostandard\n///  192dpi for IE9-11, 2dppx is standardized\n///  ```\n///  breakpoint(retina);    => \"(min-resolution: 2ddpx), (min-resolution: 192dpi)\"\n@function breakpoint($condition) {\n  //number\n  @if type-of($condition) == 'number'{\n    $condition: -to-em($condition);\n    @if $condition > 0em {\n      @return \"(min-width: #{$condition)})\";\n    } @else {\n      @warn \"`#{$condition}` is not a valid number\";\n    }\n  }\n\n  //keyword\n  @if type-of($condition) == 'string' {\n    @if $condition == \"landscape\" or $condition == \"portrait\" {\n      @return \"(orientation: #{$condition})\";\n    }\n    @if $condition == \"retina\" {\n      @return \"(min-resolution: 2dppx), (min-resolution: 192dpi)\"; //or\n    }\n\n    //named breakpoints\n    $val: parse-keyword($condition);\n    @if $val {\n      @if $val > 0em {\n        @return \"(min-width: #{$val})\";\n      }\n    }\n    @else {\n      @warn \"`#{$condition}` is not defined in your $breakpoints setting.\";\n    }\n  }\n\n  //condition expression\n  @if type-of($condition) == 'list' {\n    // gt|lt keyword|number\n    @if length($condition) == 2 {\n      $operator: nth($condition,1);\n      $val:      parse-keyword(nth($condition,2));\n\n      @if index(('gt' 'lt'),$operator) and $val {\n        @if $val > 0em {\n          @return \"(#{if($operator == 'gt','min','max')}-width: #{$val})\"\n        }\n      } @else {\n        @warn \"`#{$val}` is not valid number or #{$operator} is not a valid operator.\";\n      }\n    }\n\n    // keyword to keyword\n    @else if length($condition) == 3 {\n      $start:    parse-keyword(nth($condition,1));\n      $end:      parse-keyword(nth($condition,3));\n      $operator: nth($condition,2);\n\n      @if ($start or $end) and $operator == 'to' {\n        @if $start and $end{\n          @if $start > $end {\n            //swap\n            $temp: $start;\n            $start: $end;\n            $end:  $temp;\n          }\n        }\n\n        $str: '';\n        @if $start > 0em {\n          $str: $str + '(min-width: #{$start})';\n\n          @if $end != null and $end > 0em {\n            $str: $str + ' and ';\n          }\n        }\n\n        @if $end != null and $end > 0em {\n          $str: $str + '(max-width: #{$end})';\n        }\n        @return $str;\n      } @else {\n        @warn \"`#{$start}` or `#{$end}` is not a valid number or #{$operator} is not a valid operator.\";\n      }\n    }\n  }\n\n  @return \"\";\n}\n\n/// @access private\n@function parse-keyword($keyword) {\n  @if type-of($keyword) == 'number' {\n    @return -to-em($keyword);\n  }\n  @else if map-has-key($breakpoints, $keyword) {\n    @return -to-em(map-get($breakpoints, $keyword));\n  }\n  @else {\n    @return null;\n  }\n}\n\n\n/// Wrap a media query around the content you put inside the mixin\n/// @param {Keyword|List|Number} $value - the same as breakpoint function\n/// @example\n///   @include breakpoint(medium) {/**/} => @media screen and (min-width: 40em){/**/}\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n\n  @if $str == '' {\n    @content;\n  }\n  @else {\n    @media screen and #{$str} {\n      @content;\n    }\n  }\n}\n\n/// Iteates through breakpoints defined in `$breakpoint-classes`\n@mixin each-breakpoint($small: true){\n  $map: $breakpoint-classes;\n\n  @if not $small{\n    $map: map-remove($map,$-small);\n  }\n\n  @each $size in $map {\n    $temp: if(global-variable-exists(keyword), $keyword, null);         //store global $keyword\n    $keyword: $size !global;\n\n    @include breakpoint($size) {\n      @content;\n    }\n    $keyword: $temp !global; //restore\n  }\n}\n\n/// 用于响应式列表获取值，\n/// @example\n///   如 $map: (small: 10px, medium: 20px);\n///   get-breakpoint-val($map, small) => 10px\n///   get-breakpoint-val($map, medium) => 20px\n///   get-breakpoint-val($map, large) => 20px\n@function get-breakpoint-val($map, $value) {\n  @if not map-has-key($breakpoints, $value) {  //关键字不存在\n    @return null;\n  }\n  @else if map-has-key($map, $value) {\n    @return map-get($map, $value);\n  }\n  @else {\n    $anchor: null;\n\n    @each $key, $_ in $breakpoints {     //map 的遍历与创建时的一致\n      @if map-has-key($map, $key) {\n        $anchor: $key;\n      }\n    }\n    @return map-get($map, $anchor);\n  }\n}\n","////\n/// @group typograph\n////\n\n/// text truncate\n@mixin ellipsis {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n\n/// css image repalcement\n@mixin text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n\n@mixin text-emphasis-variant($parent, $color) {\n  #{$parent} {\n    color: $color;\n  }\n  a#{$parent} {\n    @include hover-focus {\n      color: darken($color,10%);\n    }\n  }\n}\n\n@mixin bg-variant($parent, $color){\n  #{$parent} {\n    background-color: $color;\n  }\n  a#{$parent} {\n    @include hover-focus {\n      background-color: darken($color,10%);\n    }\n  }\n}\n\n/// unstyled keeps list items block level, just removes default browser padding and list style\n@mixin list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n\n\n/// generate classes\n@mixin generate-type-classes {\n  .list-unstyled {\n    @include list-unstyled;\n  }\n  .text-hide {\n    @include text-hide;\n  }\n\n  .ellipsis {\n    @include ellipsis;\n  }\n}\n","////\n/// @group Responsive image\n////\n\n\n/// keep images form scaling beyond the width of their parents\n/// @param {String} $display - image `display` property\n@mixin img-fluid($display: block) {\n  display: $display;\n  max-width: 100%;\n  height: auto;\n}\n\n/// retina image for setting background-image and background-size\n@mixin img-retina($img-1x, $img-2x,$width-1x, $height-1x) {\n  background-image: url($img-1x);\n  @include breakpoint(retina) {\n    background-image: url($img-2x);\n    background-size: $width-1x, $height-1x;\n  }\n}\n","////\n/// @group util\n/// @access public\n////\n\n@mixin clearfix {\n  &::before,\n  &::after {\n    content: ' ';\n    display: table;\n  }\n  &::after {\n    clear: both;\n  }\n}\n\n/// removes the focus ring around an element when a mouse input is detected\n@mixin disable-mouse-outline {\n  outline: 0;\n}\n\n/// generate classes\n@mixin generate-util-classes {\n  .clearfix {\n    @include clearfix;\n  }\n  .disable-mouse-outline {\n    @include disable-mouse-outline;\n  }\n}\n","\n/// 是否启用flex 网格\n/// @type {Boolean}\n$enable-flex: false !default;\n\n/// 默认网格数\n/// @type {Number}\n$grid-count: 12 !default;\n\n/// 列间隔\n/// @type\n$grid-gutter: (\n  small: 20px,\n  medium: 30px,\n) !default;\n\n@import \"row\";\n@import \"gutter\";\n@import \"col\";\n@import \"position\";\n@import \"classes\";\n","////\n/// @group grid\n/// @access public\n////\n\n@mixin g-context ($count, $root: false){\n  $old-grid-count: $grid-count;\n  $grid-count: $count !global;\n\n  @if $root {\n    @at-root {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n  $grid-count: $old-grid-count !global;\n}\n\n/// 定义行\n/// @param {Number} $count [null] - 行数, 如果是null，将使用默认的行数(12)\n/// @param {Number} $width []\n/// @param {List} $options - 参数，可选 nest 和 collapse , unclearfix\n\n@mixin g-row (\n  $count: null,\n  $gutter: $grid-gutter,\n  $options: ()\n) {\n  // 启用flex\n  @if $enable-flex {\n    display: flex;\n    flex-wrap: wrap;\n  } @else if index($options, unclearfix) == null {\n    @include clearfix;\n  }\n\n  //嵌套row\n  @if index($options, nest) != null {\n    // 处理gutter\n    // 对于嵌套row，即合并row 和col，col是由gutter／2 的padding的，所以需要消除这个padding\n    @if is-map($gutter) {\n      //响应式的gutter\n      @each $breakpoint, $size in $gutter {\n        $margin: convert-to-rem($size / -2);\n        @include breakpoint($breakpoint) {\n          margin-left: $margin;\n          margin-right: $margin;\n        }\n      }\n    } @else if is-number($gutter){\n      $margin: convert-to-rem($gutter);\n      margin-left: $margin;\n      margin-right: $margin;\n    }\n\n    // 嵌套row，即col已经使用了collapse，所以没有padding，不需要消除\n    @if index($options, collapse) != null {\n      margin-left: 0;\n      margin-right: 0;\n    }\n  }\n  // 普通row\n  @else {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n\n\n  //自定义列数\n  @if $count != null {\n    @include g-context($count) {\n      @content;\n    }\n  }\n}\n","////\n/// @group grid\n/// @access public\n////\n\n/// 折叠列，即没有间隔\n@mixin g-col-collapse {\n  padding: {\n    left: 0;\n    right: 0;\n  }\n}\n\n/// 设置列的间隔\n@mixin g-col-uncollapse($gutter: $grid-gutter) {\n  @if is-map($gutter) {\n    //响应式的gutter\n    @each $breakpoint, $value in $gutter {\n      $padding: convert-to-rem($value) / 2;    //转换为rem\n      @include breakpoint($breakpoint) {\n        padding: {\n          left: $padding;\n          right: $padding;\n        }\n      }\n    }\n  } @else {\n    $padding: convert-to-rem($gutter) / 2;\n    padding: {\n      left: $padding;\n      right: $padding;\n    }\n  }\n}\n","////\n/// @group grid\n/// @access public\n////\n\n/// 计算列的宽度\n/// @access private\n/// @param {Number} value\n/// @example\n///   cal-col-width(78%)  => 78%\n///   cal-col-width(12)  => percentage(12/grid-count)\n///   cal-col-width(3 of 5)  => percentage(3/5)\n@function cal-col-width($value) {\n  $width: 0%;\n\n  @if is-number($value) {\n    @if unit($value) == '%' {\n      $width: $value;\n    } @else if $value < 1 and $value > 0 {\n      $width: percentage($value);\n    } @else {\n      $width: percentage($value / $grid-count);\n    }\n  } @else if is-list($value) and length($value) == 3 {\n    $width: percentage(nth($value, 1) / nth($value, 3));\n  } @else {\n    @warn \"Wrong syntax for cal-col-width(). use a number, decimal, percentage, or <number> of <number>\";\n  }\n  @return $width;\n}\n\n/// 定义一行\n@mixin g-col(\n  $size: $grid-count,\n  $gutter: $grid-gutter\n) {\n  position: relative;\n  min-height: 1px;\n  // 处理gutter\n  @include g-col-uncollapse($gutter);\n\n  $width: cal-col-width($size);\n  @if $enable-flex {\n    flex: 0 0 $width;\n    max-width: $width;\n  } @else {\n    float: left;\n    width: $width;\n  }\n}\n\n\n/// 合并行和列(combinded column row)\n@mixin g-col-row() {\n}\n","////\n/// @group grid\n/// @access public\n////\n\n\n/// 列偏移\n/// @param {Number|List} $size - 偏移值，可以是百分百、小数值、n of n 格式, 整数\n@mixin g-col-offset($size) {\n  margin-left: cal-col-width($size);\n}\n\n/// 列定位\n/// @param {Number|List|Keyword} $pos\n/// @example\n///   g-col-position(-30%);  => 向左偏移30%\n///   g-col-position(30%);  => 向右偏移30%\n@mixin g-col-position($pos) {\n  //关键字居中\n  @if $pos == 'center' {\n    & {\n      float: none;  //禁止浮动, 这样每一列都会独占一行\n    }\n    margin:{\n      left: auto;\n      right: auto;\n    }\n  } @else {\n    $offset: cal-col-width($pos);\n    left: $offset;\n  }\n}\n\n/// 取消列定位\n@mixin g-col-unposition {\n  position: static;\n  margin: {\n    left: 0;\n    right: 0;\n  }\n  float: left;\n}\n","// 生成网格类\n\n\n////\n/// @group grid\n/// @access public\n////\n\n///BEM 风格\n@mixin g-generate-classes (\n  //命名\n  $row: 'row',\n  $col: 'col',\n  $collapse: 'collapse',\n  $uncollapse: 'uncollapse',\n  $offset: 'offset',\n  $push: 'push',\n  $pull: 'pull',\n  $center: 'centered',\n  $uncenter: 'uncentered',\n  $separator: '--'\n) {\n  //row\n  .#{$row} {\n    @include g-row;\n\n    //nested row\n    & & {\n      @include g-row($options: (nest unclearfix));\n      &.#{$row + $separator + $collapse} {\n        margin: {\n          left: 0;\n          right: 0;\n        }\n      }\n    }\n  }\n  //collapse row\n  .#{$row + $separator + $collapse} {\n    > .#{$col} {\n      @include g-col-collapse;\n    }\n  }\n\n  // column\n  .#{$col} {\n    @include g-col;  //默认百分百大小\n  }\n\n  //responsive column\n  @include  each-breakpoint {\n    @for $i from 1 through $grid-count {\n      // col width\n      .#{$col + $separator}#{$keyword}-#{$i} {\n        width: cal-col-width($i);\n      }\n      // col position\n      @if $i < $grid-count {\n        .#{$col + $separator}#{$keyword}-#{$push}-#{$i} {\n          @include g-col-position($i)\n        }\n        .#{$col + $separator}#{$keyword}-#{$pull}-#{$i} {\n          @include g-col-position(-$i)\n        }\n      }\n      //offset\n      .#{$col+ $separator}#{$keyword}-#{$offset}-#{$i - 1} {\n        @include g-col-offset($i - 1);\n      }\n    }\n\n    //col position centering\n    .#{$col + $separator}#{$keyword}-#{$center} {\n      @include g-col-position(center);\n    }\n    .#{$col + $separator}#{$keyword}-#{$uncenter},\n    .#{$col + $separator}#{$keyword}-#{$push}-0,\n    .#{$col + $separator}#{$keyword}-#{$pull}-0 {\n      @include g-col-unposition;\n    }\n\n    // row collaspse\n    .#{$row + $separator}#{$keyword}-#{$collapse} {\n      > .#{$col} {\n        @include g-col-collapse;\n      }\n    }\n    .#{$row + $separator}#{$keyword}-#{$uncollapse} {\n      > .#{$col} {\n        $gutter: if(is-map($grid-gutter), get-breakpoint-val($grid-gutter, $keyword), $gutter);\n        @if $gutter != null {\n          @include g-col-uncollapse($gutter);\n        }\n      }\n    }\n\n  }\n}\n","///\n/// @group classes\n///\n\n/// generate helper css class\n@mixin generate-classes (\n  $generate-grid:true\n  ) {\n    @include generate-util-classes;\n    @include generate-type-classes;\n    @include generate-centering-classes;\n\n    @if $generate-grid {\n      @include g-generate-classes;\n    }\n}\n"],"mappings":"AMuFU,AAAK,EAAH,AAAA,EAAE,CAAC,KAAK,CAAT;ENlFL,KAAK,EAAE,GAAI;CMoFd;;AAFO,AAAK,EAAH,AAAA,EAAE,CAAC,KAAK,CAAT;EN5EL,KAAK,EAAE,IAAK;CM8Ef;;ANvFH,AAAA,QAAE,CM2BA;ENdI,KAAK,EAAE,KAAM;CMgBhB;;AAwDO,AAAQ,KAAH,AAAA,EAAE,CAAC,QAAQ,CAAf;ENtEH,KAAK,EAAE,MAAO;CMwEnB;;AAFO,AAAK,EAAH,AAAA,EAAE,CAAC,KAAK,CAAT;ENlEL,KAAK,EAAE,KAAM;CMoEhB;;AAFO,AAAW,EAAT,AAAA,QAAQ,CAAC,KAAK,EAAE,AAAS,EAAP,AAAA,MAAM,CAAC,KAAK,EAAE,AAAW,EAAT,AAAA,QAAQ,CAAC,KAAK,CAAjD;EN9DL,KAAK,EAAE,GAAI;CMgEd;;AAFO,AAAS,EAAP,AAAA,MAAM,CAAC,KAAK,EAAE,AAAU,EAAR,AAAA,OAAO,CAAC,KAAK,EAAE,AAAS,EAAP,AAAA,MAAM,CAAC,KAAK,CAA9C;EN1DL,KAAK,EAAE,IAAK;CM4Df;;AA1CO,AAAA,SAAS,CAAR;ENRP,KAAK,EAAE,GAAI;CMUZ;;AAFO,AAAE,EAAA,AAAA,QAAQ,CAAT;ENJP,KAAK,EAAE,IAAK;CMMb","names":[],"sourceRoot":"/source/"} */
