@import "../scss/helpers";

/* test block */
@include block(block) {                //.block{}
  color: red;
  @include element(element) {          //.block__element{}
    color: blue;
    @include bem-debug;
    /*
    @include element(nested-element) { //Error here: don't nest element into element
      color: blue;
    }
    */
  }
  /*
  @include block(another-block) {      //Error here: can not nest block into block
    color: red;
  }
  */

  @include element(element1, element2) { // .block__element1, .block__element2 {}
    /* element group */
    color: red;
    @include bem-debug;
  }
}

/* test scope */
.a {                                     // in '.a' context
  @include block(block2) {               // .a .block2
    color: red;
    @include element(element) {          // .a .block2__element
      color: red;
      @include bem-debug;
    }
  }
}

/*test modifier */
.a {
  @include block(block) {
    color: red;
    /*block modifiers */
    /*modifier group */
    @include modifier(one, two, three) {  //a .block--one, .a .block--two, .a .block--three
      color: red;
    }

    // default modifier
    @include modifier(&, A, B) {        // .a .block, .a .block--A, .a .block--B
      color: red;
    }

    // prifix modifier
    @include modifier('[disabled]', '[selected]', C) {  // .a .block[disabled], .a .block[selected], .block--C
      color: red;
    }

    @include modifier('.disabled', '::before', C) {  // .a .block.disabled, .a .block::before, .block--C
      color: red;
    }

    @include modifier(A) {
      /* nested modifiers */
      @include modifier(B) {              //.a .block--A--B
        color: red;
      }
      @include modifier(C) {             //.a .block--A--B--C
        color: red;
        @include modifier(D) {           //.a .block--A--B--C--D
          @include bem-debug;
          color: red;
        }
      }
    }

    /* element modifiers */
    @include element(element) {
      @include modifier(one, two) {     // .a .block__element--one, .a .block__element--two
        /* element modifier group */
        color: red;
      }
      @include modifier(A) {
        /* nested modifiers */
        @include modifier(B) {
          @include modifier(C) {
            color: red;                 // .a .block__element--A--B--C
          }
        }
      }
    }
  }
}

/* test combine style modifier */
$combined-style-modifier: true;       // enable combined style
@include block(block-combined-style) {

  @include modifier(A) {              //.block-combined-style.--A
    color: red;
  }
  //modifier group
  @include modifier(B, C) {          //.block-combined-style.--B, .block-combined-style.--C
    color: red;
  }
  // nested modifiers
  @include modifier(D) {
    @include modifier(E) {           //.block-combined-style.--D.--E
      color: red;
    }
  }

  // element modifier
  @include  element(element) {
    @include modifier(A) {          //.block-combined-style__element.--A
      color: red;
    }
  }
}

/* test shadow */
$combined-style-modifier: false;
@include block(A) {
  @include element(B) {
    color: red;
    @include shadow(active) {      //.A--active .A__B
      color: red;
    }
    @include shadow(':focus',':active') {
      color: red;
    }
  }
}

/* test namescpace */
$enable-namespace: true;
@include  block(block, component) { //.c-block
  color: red;
  @include element(element) {       //.c-block__element
    @include modifier(modifier) {   //.c-block__element--modifier
      color: red;
    }
  }
}


/* test responsive-suffix */
@include block(B) {
  // block responsive-suffix
  @include at(small) {
    width: 100px;
  }
  @include at(large) {
    width: 100px;
  }

  // element responsive-suffix
  @include element(A) {
    @include at(large) {
      width: 100px;
    }
  }

  // element group responsive-suffix
  @include element(C, D, E) {
    width: 100px;
    @include at(large) {
      width: 100px;
    }
  }
}


/* test theme */
// theme without block
@include theme(light) {
  @include block(block) {          //.t-light .block
    color: red;
  }
  @include block(block2) {         //.t-light .block2
    color: blue;
    @include element(element) {    //.t-light .block__element
      color: red;
      @include modifier(modifier) {
        color: blue;
      }
    }
    @include modifier(modifier) {  //.t-light .block2--modifier
      color: blue;
    }
  }
}

// theme within block
@include block(block) {
  color: blue;
  @include theme(light) {
    @include element(element) {
      color: red;
    }
  }
  @include element(element) {
    color: red;
    @include theme(light) {
      @include modifier(modifier) {
        color: red;
      }
    }
  }
}
