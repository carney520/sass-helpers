@import "../scss/bean";


/* test block */
@include block(block) {                //.block{}
  color: red;
  @include element(element) {          // .block__element{}
    color: blue;
    // nested element
    @include element(nested-element) { // .block__element .block__nested-element {
      color: blue;
    }
  }

  /*
  @include block(another-block) {      //Error here: can not nest block into block
    color: red;
  }
  */

  @include element(element1, element2) { // .block__element1, .block__element2 {}
    /* element group */
    color: red;
  }
}

/* test scope */
.a {                                     // in '.a' context
  @include block(block2) {               // .a .block2
    color: red;
    @include element(element) {          // .a .block2__element
      color: red;

      //nested element
      @include element(nested-element) {  //.a .block2__element .block2__nested-element {
        color: red;
      }
    }
  }
}

// semantical scope
@include scope(bem-block(block)) {
  @include block(block3) {              // .block .block3
    color: red;
    @include element(element) {         // .block .block3__element
      color: red;
    }
  }
}

/*test modifier */
.a {
  @include block(block) {
    color: red;
    /*block modifiers */
    /*modifier group */
    @include modifier(one, two, three) {  //a .block--one, .a .block--two, .a .block--three
      color: red;
    }

    @include modifier(1) {
      color: red;
    }

    // default modifier
    @include modifier(&, A, B) {        // .a .block, .a .block--A, .a .block--B
      color: red;
    }

    // prifix modifier
    @include modifier('[disabled]', '[selected]', C) {  // .a .block[disabled], .a .block[selected], .block--C
      color: red;
    }

    @include modifier('.disabled', '::before', C) {  // .a .block.disabled, .a .block::before, .block--C
      color: red;
    }

    /* element modifiers */
    @include element(element) {
      @include modifier(one, two) {     // .a .block__element--one, .a .block__element--two
        /* element modifier group */
        color: red;
      }
    }

    @include element(element1, element2) {
      @include modifier(one) {          // .a .block__element1--one, .a .block__element2--one
        /* element group modifiers */
        color: red;
      }

      @include modifier(two, three) {  // .a .block__element1--two, .a .block__element2--two, .a .block__element1--three, a. .block__element2--three
        /* element group & modifiers group*/
        color: red;
      }
    }
  }
}

/* test modifiers and */
.scope {
  @include block(block) {
    @include modifier-and(M1, M2) { //.scope .block--M1.block--M2
      color: red;
    }
  }
}

/* test combine style modifier */
$combined-style-modifier: true;       // enable combined style
@include block(block-combined-style) {

  @include modifier(A) {              //.block-combined-style.--A
    color: red;
  }

  @include modifier(&, '[disabled]', '[selected]', C) {  // .block-combined-style[disabled], .block-combined-style[selected], .block-combined-style.--C {
    color: red;
  }

  //modifier group
  @include modifier(B, C) {          //.block-combined-style.--B, .block-combined-style.--C
    color: red;
  }

  //modifier and
  @include modifier-and(B, C) {     //.block-combined-style.--B.--C
    color: red;
  }

  // nested modifiers
  // @include modifier(D) {
  //   @include modifier(E) {           //.block-combined-style.--D.--E
  //     color: red;
  //   }
  // }

  // element modifier
  @include  element(element) {
    @include modifier(A) {          //.block-combined-style__element.--A
      color: red;
    }

    //element modifier and
    @include modifier-and(A, B) {   //.block-combined-style__element.--A.--B
      color: red;
    }
  }

  @include element(element1, element2) {
    @include modifier(one) {          // .a .block__element1.--one, .a .block__element2.--one
      /* element group modifiers */
      color: red;
    }

    // modifier and
    @include modifier-and(A, B) {     //.block-combined-style__element1.--A.--B, .block-combined-style__element2.--A.--B
      color: red;
    }

    @include modifier(two, three) {   //.block-combined-style__element1.--two, .block-combined-style__element1.--three, .block-combined-style__element2.--two, .block-combined-style__element2.--three {
      /* element group & modifiers group*/
      color: red;
    }
  }
}
$combined-style-modifier: false;

/* test modifiers element */
.scope {
  @include block (A) {
    // modifier group
    @include modifier(M, M1) {
      @include element(E) {    // .scope .A--M .A__E, .scope .A--M1 .A__E {
        color: red;
        //nested element
        @include element(D, F) { //.scope .A--M .A__E .A__D, .scope .A--M .A__E .A__F, .scope .A--M1 .A__E .A__D, .scope .A--M1 .A__E .A__F 
          color: red;
        }
      }
    }

    // element group
    @include modifier(MM) {
      @include element(E1, E2) { //.scope .A--MM .A__E1, .scope .A--MM .A__E2
        color: red;
      }
    }
  }
}



/* test shadow */
@include block(A) {
  @include element(B) {
    color: red;
    @include shadow(active) {      //.A--active .A__B
      color: red;
    }
    @include shadow(':focus',':active') {  //.A:focus .A__B, .A:active .A__B
      color: red;
    }
  }

  /* shadow in element group */
  @include element(C, D) {               // .A__C, .A__D
    color: red;
    @include shadow(active) {            // .A--active .A__C, A--active .A__D
      color: red;
    }

    @include shadow(':focus', modifier) {  //.A:focus .A__C, .A:focus .A__D, .A--modifier .A__C, .A--modifier .A__D {
      color: blue;
    }
  }

  /*  shadow child */
  @include element(E) {
    color: red;
    @include shadow-child(active) {    //.A--active > .A__E
      color: red;
    }
    //shadow sibling
    @include shadow-sibling(active) {  //.A--active + .A__E
      color: red;
    }
  }

  /* shadow and */
  @include element(E) {
    @include shadow-and(M1, M2) {     //.A--M1.A--M2 .A__E {
      color: red;
    }
  }
}

/* test namescpace */
$enable-namespace: true;
@include  block(block, component) { //.c-block
  color: red;
  @include element(element) {       //.c-block__element
    @include modifier(modifier) {   //.c-block__element--modifier
      color: red;
    }
  }
}


/* test responsive-suffix */
@include block(B) {
  // block responsive-suffix
  @include at(small) {
    width: 100px;
  }
  @include at(large) {
    width: 100px;
  }

  // element responsive-suffix
  @include element(A) {
    @include at(large) {
      width: 100px;
    }
  }

  // element group responsive-suffix
  @include element(C, D, E) {
    width: 100px;
    @include at(large) {
      width: 100px;
    }
  }

  // modifier responsive-suffix
  @include modifier(C) {
    @include at(small) {
      width: 100px;
    }
  }
  @include modifier(C, D) {
    @include at(small) {
      width: 100px;
    }
  }
}


/* test theme */
// theme without block
@include theme(light) {
  @include block(block) {          //.t-light .block
    color: red;
  }
  @include block(block2) {         //.t-light .block2
    color: blue;
    @include element(element) {    //.t-light .block__element
      color: red;
      @include modifier(modifier) {
        color: blue;
      }
    }
    @include modifier(modifier) {  //.t-light .block2--modifier
      color: blue;
    }
  }
}

// theme within block
@include block(block) {
  color: blue;
  @include theme(light) {
    @include element(element) {
      color: red;
    }
  }
  @include element(element) {
    color: red;
    @include theme(light) {
      @include modifier(modifier) {
        color: red;
      }
    }
  }
}

//isolate element
$element-isolate: true;
@include block(block) {       //.block
  color: red;
  @include element(element) {  //.element
    color: red;
    @include shadow(A) {       //.block--A .element
      color: red;
    }
  }
}
$element-isolate: false;
