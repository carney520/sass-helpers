////
/// @group mixins
/// @author Hugo Giraudel
/// @see https://css-tricks.com/snippets/sass/bem-mixins/
////

/// Block Element
/// @access public
/// @alias e
/// @param {String} $element - Element's name
/// @example
///   .block {
///     @include element('element') { /*...*/ }
///     @include modifier('modifier') {
///       /*...*/
///     @include element('element'){/*...*/}
///    }
///   }
///   output=>
///   .block__element {/*...*/}
///   .block--modifier {/*...*/}
///   .block--modifier__element {/*...*/}
@mixin element($element) {
  $-parent: & !global;  // store parent from shadow
  &__#{$element} {
    @content;
  }
}

/// Block Modifier
/// @access public
/// @alias m
/// @param {String} $modifier - Modifier's name
@mixin modifier($modifier) {
  &--#{$modifier} {
    @content;
  }
}

/// inherit parent status, only use inner element
/// @example 
///  .b { 
///     @include element(a) {
///       @include shadow(c) {     //=> .b.c .b__a
///         color: red;
///       }
///     }
///   }
@mixin shadow($parent, $addPrefix: true, $prefix: '.') {
  @if $addPrefix and not index('.' '#', str-slice($parent, 1, 1)) {
    $status: $prefix + $parent;
  }
  @at-root #{$-parent}#{$parent} #{&} {
    @content;
  }
}

/// see {mixin} element
@mixin e($element) {
  @include element {
    @content;
  }
}

/// see {mixin} modifier
@mixin m($modifier){
  @include modifier {
    @content;
  }
}
