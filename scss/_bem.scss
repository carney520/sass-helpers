////
/// @group mixins
/// @author Hugo Giraudel
/// @see https://css-tricks.com/snippets/sass/bem-mixins/
////

$element-separator: '__' !default;
$modifier-separator: '--' !default;
$combined-modifier: false !default;   //'.block .--modifier'

/// Block Element
/// @access public
/// @alias e
/// @param {String} $element - Element's name
/// @example
///   .block {
///     @include element('element') { /*...*/ }
///     @include modifier('modifier') {
///       /*...*/
///     @include element('element'){/*...*/}
///    }
///   }
///   output=>
///   .block__element {/*...*/}
///   .block--modifier {/*...*/}
///   .block--modifier__element {/*...*/}
@mixin element($element) {
  $old: if(global-variable-exists(-parent), $-parent, null);
  $-parent: & !global;  // store parent from shadow
  &#{$element-separator}#{$element} {
    @content;
  }
  $-parent: $old !global;       //restore
}

/// Block Modifier
/// @access public
/// @alias m
/// @param {String} $modifier - Modifier's name
@mixin modifier($modifier) {
  $selector: null;
  @if $combined-modifier {
    $selector: selector-append(&, '.#{$modifier-separator}#{$modifier}');
  } @else {
    $selector: selector-append(&, $modifier-separator,$modifier);
  }

  @at-root #{$selector} {
    @content;
  }
}

/// inherit parent status, only use inner element
/// @example
///  .b {
///     @include element(a) {
///       @include shadow(c) {     //=> .b.c .b__a
///         color: red;
///       }
///     }
///   }
@mixin shadow($parent, $addPrefix: true, $prefix: '.') {
  @if $addPrefix and not index('.' '#', str-slice($parent, 1, 1)) {
    $parent: $prefix + $parent;
  }
  @at-root #{$-parent}#{$parent} #{&} {
    @content;
  }
}

/// see {mixin} element
@mixin e($element) {
  @include element {
    @content;
  }
}

/// see {mixin} modifier
@mixin m($modifier){
  @include modifier {
    @content;
  }
}
