////
/// @group bem
/// @author Ivan lee
////

/// enable namespace
/// @type {Boolean}
$enable-namespace: true !default;

/// block namespace prefix
/// @type {Map}
$block-namespace-prefix: (
  'utility': 'u',
  'object': 'o',
  'component': 'c',
) !default;

$theme-namespace-prefix: 't' !default;

/// define element separator
/// @type {String}
$element-separator: '__' !default;

/// define modifier separator
/// @type {String}
$modifier-separator: '--' !default;

/// modifier style like '.block .--modifier',
/// the prefix of modifier depend on $modifier-separator
/// @type {Boolean}
$combined-style-modifier: false !default;

/// responsive suffix
/// NOTE: '@' is not a valid selector, you have to escape before passing it on
/// @type {String}
/// @link http://csswizardry.com/2015/08/bemit-taking-the-bem-naming-convention-a-step-further/
$responsive-suffix: '\\@' !default;  // or _at_






// Name convention: `-` prefix to indicate private function or variables
// private global shared varibles

/// @access private
/// indicate current block context
/// @type {String}
$-block: null;    //store current block

/// indicate current element context
/// @access private
/// @type {Map}
///   {
///     elements: {List},     //current element or element group, use -get-element() to get first element
///     is-group: {Boolean},  //indicate the $-element is `element group`
///   }
$-element: null;  //store current element

/// indicate current scope
/// @access private
/// @type {selector}
$-scope: null;   //store current &

/// indicate current level, block or element
$-current-level: null;
/// indicate current theme, theme will inject into current scope
$-theme: null;
$-nested-modifiers: ();

/// define a Block
/// it does not force to use namescpace, because some blocks were known to every one that we don't
/// need to add namescpaces to them. such as grid, button
/// @access public
/// @alias b
/// @param {String} $block - Block's name
/// @param {String} $ns -    optional. namescpace of this block. Value can be 'object', 'utility' and 'component'.
/// @example
///   @include block(block) {}  // => .block
///   @include block(block, object) {}  // => .o-block
///   @include block(block, utility) {}  // => .u-block
///   @include block(block, component) {}  // => .c-block
@mixin block($block, $ns: null) {
  @if $-block != null {
    @warn 'Block nested Error: It should not be called within another block(`#{inspect($-block)}`)';
  }

  //store
  $-prev-level: $-current-level;
  $-current-level: block !global;
  $old-scope: $-scope;

  // set current block
  $block: add-namespace($block, $ns);
  $-block: $block !global;
  $block: prefixer($block);

  // set current scope
  // within theme context
  @if $-scope != null and $-theme != null {
    $-scope: '#{$-scope} #{&}' !global;
  } @else {
    $-scope: & !global;
  }

  @at-root '#{$-scope} #{$block}' {
    @content;
  }


  //reset
  $-block: null !global;
  //restore
  $-scope: $old-scope !global;
  $-current-level: $-prev-level !global;
}


/// Block Element
/// @access public
/// @alias e
/// @param {List} $elements - one or more elements
/// @example
///   @include block(block) {
///     @include element('element') { /*...*/ }
///     @include modifier('modifier') {
///       /*...*/
///     @include element('element'){/*...*/}
///    }
///   }
///   output=>
///   .block__element {/*...*/}
///   .block--modifier {/*...*/}
///   .block--modifier__element {/*...*/}
@mixin element($elements...) {
  $-prev-level: $-current-level;
  $-current-level: element !global;

  @if $-block == null {
    @error 'Block not found: `#{inspect($elements)}` element should be called within block )! ';
  }

  @if $-element != null {
    @error 'Element nested: element(#{inspect($elements)}) should not be called with another element(`#{inspect($-element)}`)!';
  }

  //save element context
  $-element: (
    elements: $elements,
    is-group: length($elements) > 1
    ) !global;

  @at-root #{-build-element-class($-block, $elements)} {
    @content;
  }

  $-element: null !global;                //reset
  $-current-level: $-prev-level !global;  //restore level
}


/// Block Modifier
/// @access public
/// @alias m
/// @alias state
/// @param {String} $modifier... - one or more modifier
@mixin modifier($modifiers...) {
  $selector: null;
  $old-nested-modifiers: $-nested-modifiers;

  @if $-current-level != block and $-current-level != element {
    @error 'Modifier error: modifier should be called within block or element: (#{inspect($modifiers)})';
  }
  // modifiers group. nonsupport nested-modifiers
  @if length($modifiers) > 1 {
    $selector: -build-modifier-group-class($modifiers);
  }
  // support for nested modifiers
  @else {
    $modifier: nth($modifiers, 1);
    $-nested-modifiers: append($-nested-modifiers, $modifier) !global;
    $selector: -build-nested-modifiers-class();
  }

  @at-root #{$selector} {
    @content;
  }
  //restore
  $-nested-modifiers: $old-nested-modifiers !global;
}


/// inherit parent status, only use inner element
/// @example
///  @include block(b) {
///     @include element(a) {
///       @include shadow(c) {                    //=> .b--c .b__a
///         color: red;
///       }
///       @include shadow('.active') {}           // .b.active .b__a
///       @include shadow(':hover', ':focus') {}  // .b:hover .b__a, .b:focus .b__a
///     }
///   }
/// @param {String} $block-states... - block state or modifier
@mixin shadow($block-states...) {
  $selector: null;

  @if $-block == null or $-element == null {
    @error 'Shadow error: shadow should be called within element.';
  }
  @if -is-element-group($-element) {
    @error 'Shadow error: shadow should not be called within `element group(#{inspect(map-get($-element, elements))})`.';
  }

  $block:   bem-block($-block);
  $element: bem-element($block, nth(map-get($-element, elements), 1));

  @if length($block-states) > 1 {
    $selectors: ();
    @each $value in $block-states {
      $selectors: append(
        $selectors,
        -build-shadow-class($block, $element, $value),
        comma);
    }
    $selector: selector-parse($selectors);
  }
  @else {
    $selector: -build-shadow-class($block, $element, nth($block-states, 1));
  }

  @at-root #{$selector} {
    @content;
  }
}


/// act like modifier
/// see breakpoint
/// @param {String} $breakpoint - breakpoint name defined in $breakpoints
/// @example
///   @include block(block) {
///     @include at(large) {                              @media screen and (#{large}) { .block\@large {} }
///       width: 90px;
///     }
///     @include element(element) {
///       @include at(large) {                            @media screen and (#{large}) {.block__element\@large {}}
///         width: 100px;
///       }
///     }
///     @include element(A, B, C) {
///        @include at(larget) {...}                      @media screen and (#{large}) {.block__A\@large, .block__B\@large, .block__C\@large{...} }
///     }
///   }
@mixin at($breakpoint) {
  $selector:null;
  @if $-current-level != block and $-current-level != element {
    @error 'Responsive suffix error: responsive suffix(at) should be called within block or element: (at#{(inspect($breakpoint))})';
  }
  @if not breakpoint-exists($breakpoint) {
    @error 'Breakpoint error: breakpoint(`#{$breakpoint}`) non-exists. Available breakpoints: #{inspect(map-keys($breakpoints))}';
  }

  @if $-current-level == block {
    $selector: bem-block-at($-block,$breakpoint);
  }
  @else {
    @if -is-element-group($-element) {
      $elements: -get-element($-element, true);
      $selectors: ();
      @each $ele in $elements {
        $selectors: append($selectors, bem-element-at($-block, $ele, $breakpoint), comma);
      }
      $selector: selector-parse($selectors);
    } @else {
      $selector: bem-element-at($-block, -get-element($-element), $breakpoint);
    }
  }

  // media
  @include breakpoint($breakpoint) {
    @at-root #{$selector} {
      @content;
    }
  }
}

/// define theme
/// unshift a theme class to head of descendant combinator
/// @param {String} $name - theme name
/// @example
///   //without block
///   @include theme(light) {
///     @include block(block) {      // => .t-light .block
///       @include element(element)  // => .t-light .block__element
///    }
///   }
///   //within block
///   @include block(block2) {       // => .block
///      @include theme(light) {
///        @include element(element) // => .t-light .block__element
///      }
///   }
@mixin theme($name) {
  //already defined
  @if $-theme != null {
    @error 'Theme error: theme alreay defined(`#{$-theme}`)';
  }

  $-theme: $name !global;
  $old-scope: $-scope;
  $theme-class: -build-theme-class($name);

  @if $old-scope == null {
    $-scope: $theme-class !global;
  } @else {
    $-scope: selector-nest($theme-class, $old-scope) !global;
  }

  @at-root {
    @content;
  }

  //reset
  $-scope: $old-scope !global;
  $-theme: null !global;
}

/// show current context
/// @access private
@mixin bem-debug {
  @debug '--';
  @debug '<current-level: #{$-current-level}>';
  @debug '<scope:         #{$-scope}>';
  @debug '<block:         #{$-block}>';
  @debug '<element:       #{inspect($-element)}>';
  @debug '<modifier:      #{inspect($-nested-modifiers)}>';
  @debug '--';
}

/// generate element class name
/// @access public
/// @param {String} $block - block name
/// @param {String} $element - element name
/// @param {String} $modifiers... - one or more modifier
@function bem-element($block,$element, $modifiers...) {
  @return bem-block($block + $element-separator + $element, $modifiers...);
}

/// generate block class name
/// @access public
/// @param {String} $block - block name
/// @param {String} $modifiers... - one or more modifier
@function bem-block($block, $modifiers...) {
  $selector: null;
  $block: prefixer($block);

  @if length($modifiers) > 0 {
    // combinded style modifier
    @if $combined-style-modifier {
      $selector: $block;
      @each $modifier in $modifiers {
        $selector: selector-append($selector, prefixer($modifier-separator + $modifier));
      }
    }
    @else {
      $selector: $block +
              '#{if(length($modifiers) > 0, $modifier-separator + list-join($modifiers, $modifier-separator), "")}';
    }
  }
  @else {
    $selector: $block;
  }
  @return $selector;
}

/// generate block responsive suffix class name
/// @access public
/// @param {String} $block - block name
/// @param {String} $breakpoint - breakpoint name
@function bem-block-at($block,$breakpoint) {
  @return #{prefixer($block)}#{$responsive-suffix}#{$breakpoint};
}

/// generate element responsive suffix class name
/// @access public
/// @param {String} $block - block name
/// @param {String} $element - element name
/// @param {String} $breakpoint - breakpoint name
@function bem-element-at($block, $element, $breakpoint) {
  @return #{bem-element($block, $element)}#{$responsive-suffix}#{$breakpoint};
}

/// return whether a string has prefix.
/// @access public
/// @param {String} $value
/// @example
///   prefixless(a)    => true
///   prefixless('.a') => false
///   prefixless(':a') => false
$-no-parse-prefixs: ('.' '#' ':' '*' '[' '>' '+');
@function prefixless($value) {
  @if not is-string($value) {
    @return false;
  }
  $i: 1;
  $l: str-length($value);
  @while $i <= $l {
    $c: str-slice($value, $i, $i);
    $i: $i + 1;
    @if $c != ' ' {
      @if index($-no-parse-prefixs, $c) != null {
        @return false;
      } @else {
        @return true;
      }
    }
  }
  @return true;
}

/// Automatic add prefix to a string
/// @param {String} $value
/// @param {String} $prefix
@function prefixer($value, $prefix: '.') {
  @if prefixless($value) {
    @return $prefix + $value;
  }
  @return $value;
}

/// build elements class name
/// @access private
/// @param {String} $block - block name
/// @param {List}  $elements - elements
@function -build-element-class($block, $elements) {
  $selectors: ();
  @each $ele in $elements {
    $selector: bem-element($block, $ele);
    @if $-scope != null {
      $selector: selector-nest($-scope, $selector);
    }
    $selectors: append($selectors, $selector, comma);
  }
  @return selector-parse($selectors);
}

/// get first elements in element-desc
/// @access private
@function -get-element($element-desc, $list: false) {
  @if $list {
    @return map-get($element-desc, elements);
  } @else {
    @return nth(map-get($element-desc, elements), 1);
  }
}

/// test if current element context is `element group`
/// @access private
@function -is-element-group($element-desc) {
  @return map-get($element-desc, is-group);
}

/// @access private
@function -get-modified-object($current-level, $block, $element-desc) {
  $modified-object: null;
  // block modifiers
  @if $current-level == block {
    $modified-object: bem-block($block);
  }
  // element modifiers and not inner element group context
  @else if $current-level == element and not -is-element-group($element-desc) {
    $element: -get-element($element-desc);
    $modified-object: bem-element($block, $element);
  }
  // invalid modified object
  @else {
    @error 'Modifier error: modifier should not called within `element group(#{inspect(map-get($element-desc, elements))}`.';
  }
  @return $modified-object;
}

@function -build-modifier-group-class($modifiers) {
  $modified-object: -get-modified-object($-current-level, $-block, $-element);

  $selectors: ();
  @each $modifier in $modifiers {
    $selector: null;
    @if $modifier == & {
      $selector: $modified-object;
    }
    @else if not prefixless($modifier) {
      $selector: selector-append($modified-object, $modifier);
    }

    @else {
      $selector: bem-block($modified-object, $modifier);
    }

    @if $-scope != null {
      $selector: selector-nest($-scope, $selector);
    }
    $selectors: append($selectors, $selector, comma);
  }
  @return selector-parse($selectors);
}

@function -build-nested-modifiers-class() {
  $modifiers: $-nested-modifiers;
  $modified-object: -get-modified-object($-current-level, $-block, $-element);
  $selector: bem-block($modified-object, $modifiers...);
  @return if($-scope != null,
    selector-nest($-scope, $selector),
    $selector
    );
}

/// @access private
@function -build-shadow-class($block, $element, $value) {
  // as modifier
  @if prefixless($value) {
    $value: selector-nest(bem-block($block, $value), $element);
  }
  // as append
  @else {
    $value: selector-nest(selector-append($block, $value), $element);
  }
  // context
  @if $-scope {
    $value: selector-nest($-scope, $value);
  }
  @return $value;
}


/// add namescpace prifix to block
/// @access private
@function add-namespace($name, $namescpace) {
  @if $enable-namespace and $namescpace != null {
    @if map-has-key($block-namespace-prefix, $namescpace) {
      @return map-get($block-namespace-prefix, $namescpace) + '-' + $name;
    } @else {
      @error 'Namespace Error: unknown namescpace(#{inspect($namescpace)}) when define block(#{$name}, #{inspect($namescpace)})' +
      '. Available namespace: (#{inspect(map-keys($block-namespace-prefix))})';
    }
  }
  @return $name;
}

/// @access private
@function -build-theme-class($name) {
  @if $enable-namespace && $theme-namespace-prefix != null {
    @return prefixer($theme-namespace-prefix + '-' + $name);
  } @else {
    @return prefixer($name);
  }
}
