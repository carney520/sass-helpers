/// TODO support group


/// like selector-append
/// @example
///   .control {
///     @include append-to(textarea) {  //=> textarea.control
///       max-width: 100%;
///     }
///   }
@mixin append-to($selector...) {
  @include -high-order-selector($selector, selector-append, 1, append-to) {
    @content;
  }
}


/// @example
///   textarea {
///     @include append('.control') {  //=> textarea.control
///       max-width: 100%;
///     }
///   }
@mixin append($selector...) {
  @include -high-order-selector($selector, selector-append, 2, append) {
    @content;
  }
}

@mixin nest-to($selector...) {
  @include -high-order-selector($selector, selector-nest, 1, nest-to) {
    @content;
  }
}

@mixin nest($selector...) {
  @include -high-order-selector($selector, selector-nest, 2, nest) {
    @content;
  }
}

@mixin child-of($selector...) {
  @include -high-order-selector($selector, selector-child, 1, child-of) {
    @content;
  }
}

@mixin child($selector...) {
  @include -high-order-selector($selector, selector-child, 2, child) {
    @content;
  }
}


@mixin -high-order-selector($selector, $function-name, $order, $mixin-name) {
  @if & != null {
    $selectors: -combine-selectors($selector, &, $function-name, $order);
    @at-root #{$selectors} {
      @content;
    }
  }
  @else {
    @warn "#{$mixin-name} error: `&` is null";
  }
}

@function selector-child($selectors...) {
  @return selector-parse(list-join($selectors, ' > '));
}

@function selector-sibling($selectors...) {
  @return selector-parse(list-join($selectors, ' + '));
}

/// @access private
/// @param {List} $selectors - selector group
/// @param {Selector} $parent - `&`
/// @param {Number} $order - 1: function-name(selector, &)
///                          0: function-name(&, selector)
/// @param {String} $function-name - function name to call
@function -combine-selectors($selectors, $parent, $function-name, $order: 1) {
  $combined-selectors: ();
  @each $selector in $selectors {
    $combined-selectors: append($combined-selectors,
      if($order == 1,
        call($function-name, $selector, $parent),
        call($function-name, $parent, $selector)
      ),
      comma
    );
  }
  @return selector-parse($combined-selectors);
}



/// return whether a string has prefix.
/// @access public
/// @param {String} $value
/// @example
///   prefixless(a)    => true
///   prefixless('.a') => false
///   prefixless(':a') => false
$-no-parse-prefixs: ('.' '#' ':' '*' '[' '>' '+');
@function prefixless($value) {
  // some color keyword
  @if is-number($value) or is-color($value){
    @return true;
  }
  @else if is-list($value) and length($value) == 1 {
    $value: nth($value, 1);
  }
  @else if not is-string($value) {
    @return false;
  }

  $i: 1;
  $l: str-length($value);
  @while $i <= $l {
    $c: str-slice($value, $i, $i);
    $i: $i + 1;
    @if $c != ' ' {
      @if index($-no-parse-prefixs, $c) != null {
        @return false;
      } @else {
        @return true;
      }
    }
  }
  @return true;
}

/// Automatic add prefix to a string
/// @param {String} $value
/// @param {String} $prefix
@function prefixer($value, $prefix: '.') {
  @if prefixless($value) {
    @return $prefix + $value;
  }
  @return $value;
}
